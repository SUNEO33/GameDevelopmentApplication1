#include "WingEnemy.h"
#include "../../Utility/InputControl.h"
#include "DxLib.h"


//コンストラクタ
WingEnemy::WingEnemy() : animation_count(0), flip_flag(FALSE)
{
	anima[0] = NULL;
	anima[1] = NULL;
}

//デストラクタ
WingEnemy::~WingEnemy()
{

}

//初期化処理
void WingEnemy::Initialize()
{
	//画像の読み込み
	anima[0] = LoadGraph("Resource/Images/WingEnemy/1.png");
	anima[1] = LoadGraph("Resource/Images/WingEnemy/2.png");

	//エラーチェック
	if (anima[0] == -1 || anima[1] == -1)
	{
		throw("ウィングエネミーの画像がありません\n");
	}


	//向きの設定
	radian = 0.0f;

	//大きさの設定
	box_size = 64.0f;

	//初期画像の設定
	image = anima[0];
}

//更新処理
void WingEnemy::Update()
{
	location.x += 1.0f;     //位置情報の更新

	if (location.x >= 640.0f)
	{
		location.x = 0.0f;
	}
	//移動処理
	//Movement();
	//アニメーション制御
	AnimationControl();
}
//描画処理
void WingEnemy::Draw()const
{
	//ウィングエネミー画像の描画
	DrawRotaGraphF(location.x, 390, 0.5, radian, image, TRUE, flip_flag);
	
	//デバッグ用
#if _DEBUG
	//当たり判定の可視化
	Vector2D box_collision_upper_left = location - (box_size / 2.0f);
	Vector2D box_collision_lower_right = location + (box_size / 2.0f);
	DrawBoxAA(box_collision_upper_left.x, box_collision_upper_left.y, box_collision_lower_right.x, box_collision_lower_right.y, GetColor(255, 0, 0), FALSE);

#endif

}

//終了時処理
void WingEnemy::Finalize()
{
	//使用した画像を開放する
	DeleteGraph(anima[0]);
	DeleteGraph(anima[1]);
}

//当たり判定通知処理
void WingEnemy::OnHitCollision(GameObject* hit_object)
{
	//当たった時の処理
}
//移動処理
void WingEnemy::Movement()
{
	//移動の速さ
	Vector2D velocity = 0.0f;

	//左右移動
	if (InputControl::GetKey(KEY_INPUT_LEFT))
	{
		velocity.x += -1.0f;
		flip_flag = TRUE;
	}
	else if (InputControl::GetKey(KEY_INPUT_RIGHT))
	{
		velocity.x += 1.0f;
		flip_flag = FALSE;
	}
	else
	{
		velocity.x += 0.0f;
	}
	//現在の位置情報に速さを加算する
	location += velocity;
}

//アニメーション制御
void WingEnemy::AnimationControl()
{
	//フレームカウントを加算する
	animation_count++;

	//60フレーム目に到達したら
	if (animation_count >= 60)
	{
		//カウントのリセット
		animation_count = 0;

		//画像の切り替え
		if (image == anima[0])
		{
			image = anima[1];
		}
		else
		{
			image = anima[0];
		}
	}
}